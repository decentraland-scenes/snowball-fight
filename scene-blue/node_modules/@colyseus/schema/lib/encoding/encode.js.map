{"version":3,"file":"encode.js","sourceRoot":"","sources":["../../src/encoding/encode.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2018 Endel Dreyer\n * Copyright (c) 2014 Ion Drive Software Ltd.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\n/**\n * msgpack implementation highly based on notepack.io\n * https://github.com/darrachequesne/notepack\n */\n\n\nfunction utf8Length(str) {\n  var c = 0, length = 0;\n  for (var i = 0, l = str.length; i < l; i++) {\n    c = str.charCodeAt(i);\n    if (c < 0x80) {\n      length += 1;\n    }\n    else if (c < 0x800) {\n      length += 2;\n    }\n    else if (c < 0xd800 || c >= 0xe000) {\n      length += 3;\n    }\n    else {\n      i++;\n      length += 4;\n    }\n  }\n  return length;\n}\n\nexport function utf8Write(view, offset, str) {\n  var c = 0;\n  for (var i = 0, l = str.length; i < l; i++) {\n    c = str.charCodeAt(i);\n    if (c < 0x80) {\n      view[offset++] = c;\n    }\n    else if (c < 0x800) {\n      view[offset++] = 0xc0 | (c >> 6);\n      view[offset++] = 0x80 | (c & 0x3f);\n    }\n    else if (c < 0xd800 || c >= 0xe000) {\n      view[offset++] = 0xe0 | (c >> 12);\n      view[offset++] = 0x80 | (c >> 6 & 0x3f);\n      view[offset++] = 0x80 | (c & 0x3f);\n    }\n    else {\n      i++;\n      c = 0x10000 + (((c & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\n      view[offset++] = 0xf0 | (c >> 18);\n      view[offset++] = 0x80 | (c >> 12 & 0x3f);\n      view[offset++] = 0x80 | (c >> 6 & 0x3f);\n      view[offset++] = 0x80 | (c & 0x3f);\n    }\n  }\n}\n\nexport function int8(bytes, value) {\n  bytes.push(value & 255);\n};\n\nexport function uint8(bytes, value) {\n  bytes.push(value & 255);\n};\n\nexport function int16(bytes, value) {\n  bytes.push(value & 255);\n  bytes.push((value >> 8) & 255);\n};\n\nexport function uint16(bytes, value) {\n  bytes.push(value & 255);\n  bytes.push((value >> 8) & 255);\n};\n\nexport function int32(bytes, value) {\n  bytes.push(value & 255);\n  bytes.push((value >> 8) & 255);\n  bytes.push((value >> 16) & 255);\n  bytes.push((value >> 24) & 255);\n};\n\nexport function uint32(bytes, value) {\n  const b4 = value >> 24;\n  const b3 = value >> 16;\n  const b2 = value >> 8;\n  const b1 = value;\n  bytes.push(b1 & 255);\n  bytes.push(b2 & 255);\n  bytes.push(b3 & 255);\n  bytes.push(b4 & 255);\n};\n\nexport function int64(bytes, value) {\n  const high = Math.floor(value / Math.pow(2, 32));\n  const low = value >>> 0;\n  uint32(bytes, low);\n  uint32(bytes, high);\n};\n\nexport function uint64(bytes, value) {\n  const high = (value / Math.pow(2, 32)) >> 0;\n  const low = value >>> 0;\n  uint32(bytes, low);\n  uint32(bytes, high);\n};\n\nexport function float32(bytes, value) {\n  writeFloat32(bytes, value);\n}\n\nexport function float64(bytes, value) {\n  writeFloat64(bytes, value);\n}\n\n// force little endian to facilitate decoding on multiple implementations\nconst _isLittleEndian = true;  // new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\nconst _int32 = new Int32Array(2);\nconst _float32 = new Float32Array(_int32.buffer);\nconst _float64 = new Float64Array(_int32.buffer);\n\nexport function writeFloat32(bytes, value) {\n  _float32[0] = value;\n  int32(bytes, _int32[0]);\n};\n\nexport function writeFloat64(bytes, value) {\n  _float64[0] = value;\n  int32(bytes, _int32[_isLittleEndian ? 0 : 1]);\n  int32(bytes, _int32[_isLittleEndian ? 1 : 0]);\n};\n\nexport function boolean(bytes, value) {\n  return uint8(bytes, value ? 1 : 0);\n};\n\nexport function string(bytes, value) {\n  // encode `null` strings as empty.\n  if (!value) { value = \"\"; }\n\n  let length = utf8Length(value);\n  let size = 0;\n\n  // fixstr\n  if (length < 0x20) {\n    bytes.push(length | 0xa0);\n    size = 1;\n  }\n  // str 8\n  else if (length < 0x100) {\n    bytes.push(0xd9);\n    uint8(bytes, length);\n    size = 2;\n  }\n  // str 16\n  else if (length < 0x10000) {\n    bytes.push(0xda);\n    uint16(bytes, length);\n    size = 3;\n  }\n  // str 32\n  else if (length < 0x100000000) {\n    bytes.push(0xdb);\n    uint32(bytes, length);\n    size = 5;\n  } else {\n    throw new Error('String too long');\n  }\n\n  utf8Write(bytes, bytes.length, value);\n\n  return size + length;\n}\n\nexport function number(bytes, value) {\n  if (isNaN(value)) {\n    return number(bytes, 0);\n\n  } else if (!isFinite(value)) {\n    return number(bytes, (value > 0) ? Number.MAX_SAFE_INTEGER : -Number.MAX_SAFE_INTEGER);\n\n  } else if (value !== (value|0)) {\n    bytes.push(0xcb);\n    writeFloat64(bytes, value);\n    return 9;\n\n    // TODO: encode float 32?\n    // is it possible to differentiate between float32 / float64 here?\n\n    // // float 32\n    // bytes.push(0xca);\n    // writeFloat32(bytes, value);\n    // return 5;\n  }\n\n  if (value >= 0) {\n    // positive fixnum\n    if (value < 0x80) {\n      uint8(bytes, value);\n      return 1;\n    }\n\n    // uint 8\n    if (value < 0x100) {\n      bytes.push(0xcc);\n      uint8(bytes, value);\n      return 2;\n    }\n\n    // uint 16\n    if (value < 0x10000) {\n      bytes.push(0xcd);\n      uint16(bytes, value);\n      return 3;\n    }\n\n    // uint 32\n    if (value < 0x100000000) {\n      bytes.push(0xce);\n      uint32(bytes, value);\n      return 5;\n    }\n\n    // uint 64\n    bytes.push(0xcf);\n    uint64(bytes, value);\n    return 9;\n\n  } else {\n\n    // negative fixnum\n    if (value >= -0x20) {\n      bytes.push(0xe0 | (value + 0x20));\n      return 1;\n    }\n\n    // int 8\n    if (value >= -0x80) {\n      bytes.push(0xd0);\n      int8(bytes, value);\n      return 2;\n    }\n\n    // int 16\n    if (value >= -0x8000) {\n      bytes.push(0xd1);\n      int16(bytes, value);\n      return 3;\n    }\n\n    // int 32\n    if (value >= -0x80000000) {\n      bytes.push(0xd2);\n      int32(bytes, value);\n      return 5;\n    }\n\n    // int 64\n    bytes.push(0xd3);\n    int64(bytes, value);\n    return 9;\n  }\n}"]}