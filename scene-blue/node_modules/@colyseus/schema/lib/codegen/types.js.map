{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/codegen/types.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\n\nconst VERSION = JSON.parse(fs.readFileSync(__dirname + \"/../../package.json\").toString()).version;\nconst COMMENT_HEADER = `\nTHIS FILE HAS BEEN GENERATED AUTOMATICALLY\nDO NOT CHANGE IT MANUALLY UNLESS YOU KNOW WHAT YOU'RE DOING\n\nGENERATED USING @colyseus/schema ${VERSION}\n`;\n\nexport function getCommentHeader(singleLineComment: string = \"//\") {\n    return `${COMMENT_HEADER.split(\"\\n\").map(line => `${singleLineComment} ${line}`).join(\"\\n\")}`;\n}\n\nexport class Context {\n    classes: Class[] = [];\n    interfaces: Interface[] = [];\n\n    getStructures() {\n        return {\n            classes: this.classes.filter(klass => {\n                if (this.isSchemaClass(klass)) {\n                    return true;\n                } else {\n                    let parentClass = klass;\n                    while (parentClass = this.getParentClass(parentClass)) {\n                        if (this.isSchemaClass(parentClass)) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }),\n            interfaces: this.interfaces,\n        };\n    }\n\n    addStructure(structure: IStructure) {\n        structure.context = this;\n\n        if (structure instanceof Class) {\n            this.classes.push(structure);\n\n        } else if (structure instanceof Interface) {\n            this.interfaces.push(structure);\n        }\n    }\n\n    private getParentClass(klass: Class) {\n        return this.classes.find(c => c.name === klass.extends);\n    }\n\n    private isSchemaClass(klass: Class) {\n        let isSchema: boolean = false;\n\n        let currentClass = klass;\n        while (!isSchema && currentClass) {\n            isSchema = currentClass.extends === \"Schema\";\n            currentClass = this.getParentClass(currentClass);\n        }\n\n        return isSchema\n    }\n}\n\nexport interface IStructure {\n    context: Context;\n    name: string;\n    properties: Property[];\n    addProperty(property: Property);\n}\n\nexport class Interface implements IStructure {\n    context: Context;\n    name: string;\n    properties: Property[] = [];\n\n    addProperty(property: Property) {\n        if (property.type.indexOf(\"[]\") >= 0) {\n            // is array!\n            property.childType = property.type.match(/([^\\[]+)/i)[1];\n            property.type = \"array\";\n            this.properties.push(property);\n\n        } else {\n            this.properties.push(property);\n        }\n    }\n}\n\nexport class Class implements IStructure {\n    context: Context;\n    name: string;\n    properties: Property[] = [];\n    extends: string;\n\n    addProperty(property: Property) {\n        property.index = this.properties.length;\n        this.properties.push(property);\n    }\n\n    postProcessing() {\n        /**\n         * Ensure the proprierties `index` are correct using inheritance\n         */\n        let parentKlass: Class = this;\n\n        while (\n            parentKlass &&\n            (parentKlass = this.context.classes.find(k => k.name === parentKlass.extends))\n        ) {\n            this.properties.forEach(prop => {\n                prop.index += parentKlass.properties.length;\n            });\n        }\n    }\n}\n\nexport class Property {\n    index: number;\n    name: string;\n    type: string;\n    childType: string;\n    deprecated?: boolean;\n}\n\nexport interface File {\n    name: string\n    content: string;\n}\n\nexport function getInheritanceTree(klass: Class, allClasses: Class[], includeSelf: boolean = true) {\n    let currentClass = klass;\n    let inheritanceTree: Class[] = [];\n\n    if (includeSelf) {\n        inheritanceTree.push(currentClass);\n    }\n\n    while (currentClass.extends !== \"Schema\") {\n        currentClass = allClasses.find(klass => klass.name == currentClass.extends);\n        inheritanceTree.push(currentClass);\n    }\n\n    return inheritanceTree;\n}\n"]}