{"version":3,"file":"SchemaSerializer.js","sources":["../../../src/serializer/SchemaSerializer.ts"],"sourcesContent":["import { Serializer } from \"./Serializer\";\nimport { Schema, Reflection, Iterator } from \"@colyseus/schema\";\n\nexport type SchemaConstructor<T = Schema> = new (...args: any[]) => T;\n\nexport class SchemaSerializer<T extends Schema = any> implements Serializer<T> {\n    state: T;\n\n    setState(rawState: any): void {\n        this.state.decode(rawState);\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    patch(patches) {\n        this.state.decode(patches);\n    }\n\n    teardown() {\n        this.state?.['$changes']?.root.clearRefs();\n    }\n\n    handshake(bytes: number[], it?: Iterator) {\n        if (this.state) {\n            // validate client/server definitinos\n            const reflection = new Reflection();\n            reflection.decode(bytes, it);\n\n        } else {\n            // initialize reflected state from server\n            this.state = Reflection.decode(bytes, it) as any;\n        }\n    }\n}\n"],"names":["Reflection"],"mappings":";;;;;;;;IAKA;KA8BC;IA3BG,mCAAQ,GAAR,UAAS,QAAa;QAClB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KAC/B;IAED,mCAAQ,GAAR;QACI,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;IAED,gCAAK,GAAL,UAAM,OAAO;QACT,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KAC9B;IAED,mCAAQ,GAAR;;QACI,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAG,UAAU,CAAC,0CAAE,IAAI,CAAC,SAAS,EAAE,CAAC;KAC9C;IAED,oCAAS,GAAT,UAAU,KAAe,EAAE,EAAa;QACpC,IAAI,IAAI,CAAC,KAAK,EAAE;;YAEZ,IAAM,UAAU,GAAG,IAAIA,iBAAU,EAAE,CAAC;YACpC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SAEhC;aAAM;;YAEH,IAAI,CAAC,KAAK,GAAGA,iBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAQ,CAAC;SACpD;KACJ;IACL,uBAAC;AAAD,CAAC;;;;"}