"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.mockPreviewWearables = exports.getAllPreviewWearables = void 0;
var path = require("path");
var fs = require("fs");
var setupUtils_1 = require("./setupUtils");
var schemas_1 = require("@dcl/schemas");
var serveWearable = function (_a) {
    var _b;
    var assetJsonPath = _a.assetJsonPath, baseUrl = _a.baseUrl, catalystRootFolder = _a.catalystRootFolder;
    var wearableDir = path.dirname(assetJsonPath);
    var assetJson = require(assetJsonPath);
    if (!schemas_1.sdk.AssetJson.validate(assetJson)) {
        var errors = (schemas_1.sdk.AssetJson.validate.errors || [])
            .map(function (a) { return a.dataPath + " " + a.message; })
            .join('');
        console.error("Unable to validate asset.json properly, please check it.", errors);
        throw new Error("Invalid asset.json (" + assetJsonPath + ")");
    }
    var dclIgnorePath = path.resolve(wearableDir, '.dclignore');
    var ignoreFileContent = '';
    if (fs.existsSync(dclIgnorePath)) {
        ignoreFileContent = fs.readFileSync(path.resolve(wearableDir, '.dclignore'), 'utf-8');
    }
    var hashedFiles = (0, setupUtils_1.getFilesFromFolder)({
        folder: wearableDir,
        addOriginalPath: false,
        ignorePattern: ignoreFileContent,
        rootFolder: catalystRootFolder
    });
    var thumbnailFiltered = hashedFiles.filter(function ($) { return ($ === null || $ === void 0 ? void 0 : $.file) == assetJson.thumbnail; });
    var thumbnail = thumbnailFiltered.length > 0 && ((_b = thumbnailFiltered[0]) === null || _b === void 0 ? void 0 : _b.hash) && baseUrl + "/" + thumbnailFiltered[0].hash;
    return {
        id: assetJson.id || '00000000-0000-0000-0000-000000000000',
        rarity: assetJson.rarity,
        i18n: [{ code: 'en', text: assetJson.name }],
        description: assetJson.description,
        thumbnail: thumbnail,
        baseUrl: baseUrl,
        name: assetJson.name || '',
        data: {
            category: assetJson.category,
            replaces: [],
            hides: [],
            tags: [],
            scene: hashedFiles,
            representations: [
                {
                    bodyShapes: ['urn:decentraland:off-chain:base-avatars:BaseMale'],
                    mainFile: "male/" + assetJson.model,
                    contents: hashedFiles.map(function ($) { return ({ key: "male/" + ($ === null || $ === void 0 ? void 0 : $.file), url: baseUrl + "/" + ($ === null || $ === void 0 ? void 0 : $.hash) }); }),
                    overrideHides: [],
                    overrideReplaces: []
                },
                {
                    bodyShapes: ['urn:decentraland:off-chain:base-avatars:BaseFemale'],
                    mainFile: "female/" + assetJson.model,
                    contents: hashedFiles.map(function ($) { return ({ key: "female/" + ($ === null || $ === void 0 ? void 0 : $.file), url: baseUrl + "/" + ($ === null || $ === void 0 ? void 0 : $.hash) }); }),
                    overrideHides: [],
                    overrideReplaces: []
                }
            ]
        }
    };
};
var getAllPreviewWearables = function (_a) {
    var baseFolders = _a.baseFolders, catalystRootFolder = _a.catalystRootFolder, baseUrl = _a.baseUrl;
    var assetPathArray = [];
    for (var _i = 0, baseFolders_1 = baseFolders; _i < baseFolders_1.length; _i++) {
        var wearableDir = baseFolders_1[_i];
        var assetJsonPath = path.resolve(wearableDir, 'asset.json');
        if (fs.existsSync(assetJsonPath)) {
            assetPathArray.push(assetJsonPath);
        }
    }
    var ret = [];
    for (var _b = 0, assetPathArray_1 = assetPathArray; _b < assetPathArray_1.length; _b++) {
        var assetJsonPath = assetPathArray_1[_b];
        try {
            ret.push(serveWearable({ assetJsonPath: assetJsonPath, baseUrl: baseUrl, catalystRootFolder: catalystRootFolder }));
        }
        catch (err) {
            console.error("Couldn't mock the asset " + assetJsonPath + ". Please verify the correct format and scheme.", err);
        }
    }
    return ret;
};
exports.getAllPreviewWearables = getAllPreviewWearables;
var mockPreviewWearables = function (app, baseFolders, catalystRootFolder) {
    app.use('/preview-wearables', function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
        var baseUrl;
        return __generator(this, function (_a) {
            baseUrl = "http://" + req.get('host') + "/content/contents";
            return [2 /*return*/, res.json({
                    ok: true,
                    data: (0, exports.getAllPreviewWearables)({ baseUrl: baseUrl, baseFolders: baseFolders, catalystRootFolder: catalystRootFolder })
                })];
        });
    }); });
    app.use('/preview-wearables/:id', function (req, res, next) { return __awaiter(void 0, void 0, void 0, function () {
        var baseUrl, wearables, wearableId;
        return __generator(this, function (_a) {
            baseUrl = "http://" + req.get('host') + "/content/contents";
            wearables = (0, exports.getAllPreviewWearables)({ baseUrl: baseUrl, baseFolders: baseFolders, catalystRootFolder: catalystRootFolder });
            wearableId = req.params.id;
            return [2 /*return*/, res.json({
                    ok: true,
                    data: wearables.filter(function (w) { return (w === null || w === void 0 ? void 0 : w.id) === wearableId; })
                })];
        });
    }); });
};
exports.mockPreviewWearables = mockPreviewWearables;
