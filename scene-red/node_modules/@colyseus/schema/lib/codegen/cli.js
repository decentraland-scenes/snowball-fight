"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var argv_1 = require("./argv");
var api_1 = require("./api");
var supportedTargets = {
    csharp: 'generate for C#/Unity',
    cpp: 'generate for C++',
    haxe: 'generate for Haxe',
    ts: 'generate for TypeScript',
    js: 'generate for JavaScript',
    java: 'generate for Java',
    lua: 'generate for LUA',
};
function displayHelp() {
    console.log("\nschema-codegen [path/to/Schema.ts]\n\nUsage (C#/Unity)\n    schema-codegen src/Schema.ts --output client-side/ --csharp --namespace MyGame.Schema\n\nValid options:\n    --output: the output directory for generated client-side schema files\n" + Object.
        keys(supportedTargets).
        map(function (targetId) { return ("    --" + targetId + ": " + supportedTargets[targetId]); }).
        join("\n") + "\n\nOptional:\n    --namespace: generate namespace on output code\n    --decorator: custom name for @type decorator to scan for");
    process.exit();
}
var args = (0, argv_1.default)(process.argv.slice(2));
if (args.help) {
    displayHelp();
}
var targetId;
for (var target in supportedTargets) {
    if (args[target]) {
        targetId = target;
    }
}
if (!args.output) {
    console.error("You must provide a valid --output directory.");
    displayHelp();
}
try {
    args.files = args._;
    (0, api_1.generate)(targetId, {
        files: args._,
        decorator: args.decorator,
        output: args.output,
        namespace: args.namespace
    });
}
catch (e) {
    console.error(e.message);
    console.error(e.stack);
    displayHelp();
}
//# sourceMappingURL=cli.js.map