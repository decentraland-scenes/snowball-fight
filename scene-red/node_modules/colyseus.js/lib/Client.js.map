{"version":3,"file":"Client.js","sourceRoot":"","sources":["../src/Client.ts"],"names":[],"mappings":"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","sourcesContent":["import { post, get } from \"httpie\";\n\nimport { ServerError } from './errors/ServerError';\nimport { Room, RoomAvailable } from './Room';\nimport { Auth } from './Auth';\nimport { SchemaConstructor } from './serializer/SchemaSerializer';\n\nexport type JoinOptions = any;\n\nexport class MatchMakeError extends Error {\n    code: number;\n    constructor(message: string, code: number) {\n        super(message);\n        this.code = code;\n        Object.setPrototypeOf(this, MatchMakeError.prototype);\n    }\n}\n\n// - React Native does not provide `window.location`\n// - Cocos Creator (Native) does not provide `window.location.hostname` \nconst DEFAULT_ENDPOINT = (typeof (window) !== \"undefined\" &&  typeof (window?.location?.hostname) !== \"undefined\") \n    ? `${window.location.protocol.replace(\"http\", \"ws\")}//${window.location.hostname}${(window.location.port && `:${window.location.port}`)}`\n    : \"ws://127.0.0.1:2567\";\n\nexport class Client {\n    protected endpoint: string;\n    protected _auth: Auth;\n\n    constructor(endpoint: string = DEFAULT_ENDPOINT) {\n        this.endpoint = endpoint;\n    }\n\n    public get auth(): Auth {\n        if (!this._auth) { this._auth = new Auth(this.endpoint); }\n        return this._auth;\n    }\n\n    public async joinOrCreate<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('joinOrCreate', roomName, options, rootSchema);\n    }\n\n    public async create<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('create', roomName, options, rootSchema);\n    }\n\n    public async join<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('join', roomName, options, rootSchema);\n    }\n\n    public async joinById<T>(roomId: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('joinById', roomId, options, rootSchema);\n    }\n\n    public async reconnect<T>(roomId: string, sessionId: string, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('joinById', roomId, { sessionId }, rootSchema);\n    }\n\n    public async getAvailableRooms<Metadata= any>(roomName: string = \"\"): Promise<RoomAvailable<Metadata>[]> {\n        const url = `${this.endpoint.replace(\"ws\", \"http\")}/matchmake/${roomName}`;\n        return (await get(url, { headers: { 'Accept': 'application/json' } })).data;\n    }\n\n    public async consumeSeatReservation<T>(response: any, rootSchema?: SchemaConstructor<T>): Promise<Room<T>> {\n        const room = this.createRoom<T>(response.room.name, rootSchema);\n        room.id = response.room.roomId;\n        room.sessionId = response.sessionId;\n\n        room.connect(this.buildEndpoint(response.room, { sessionId: room.sessionId }));\n\n        return new Promise((resolve, reject) => {\n            const onError = (code, message) => reject(new ServerError(code, message));\n            room.onError.once(onError);\n\n            room['onJoin'].once(() => {\n                room.onError.remove(onError);\n                resolve(room);\n            });\n        });\n    }\n\n    protected async createMatchMakeRequest<T>(\n        method: string,\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        const url = `${this.endpoint.replace(\"ws\", \"http\")}/matchmake/${method}/${roomName}`;\n\n        // automatically forward auth token, if present\n        if (this._auth && this._auth.hasToken) {\n            options.token = this._auth.token;\n        }\n\n        const response = (\n            await post(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(options)\n            })\n        ).data;\n\n        if (response.error) {\n            throw new MatchMakeError(response.error, response.code);\n        }\n\n        return this.consumeSeatReservation<T>(response, rootSchema);\n    }\n\n    protected createRoom<T>(roomName: string, rootSchema?: SchemaConstructor<T>) {\n        return new Room<T>(roomName, rootSchema);\n    }\n\n    protected buildEndpoint(room: any, options: any = {}) {\n        const params = [];\n\n        for (const name in options) {\n            if (!options.hasOwnProperty(name)) {\n                continue;\n            }\n            params.push(`${name}=${options[name]}`);\n        }\n\n        return `${this.endpoint}/${room.processId}/${room.roomId}?${params.join('&')}`;\n    }\n\n}\n"]}